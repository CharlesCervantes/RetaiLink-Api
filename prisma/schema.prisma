// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model promotores {
  id_promotor             BigInt @id @default(autoincrement()) 
  vc_contrasena          String
  vc_telefono            String
  vc_correo              String 
  i_registro             Int 
  i_actualizacion        Int

  e_rol                    Roles @default(User)

  perfil perfiles_promotor?

  pedido pedido[]
}


model usuarios {
  id_usuario             BigInt @id @default(autoincrement()) 
  vc_nombre              String
  vc_apellido_paterno    String
  vc_apellido_materno    String
  vc_contrasena          String
  vc_telefono            String 
  i_registro             Int 
  i_actualizacion        Int

  e_rol                    Roles @default(User)

  id_cliente            BigInt?
  cliente clientes? @relation(fields: [id_cliente], references: [id_cliente])

  pedido pedido[]
}

model perfiles_promotor {
  id_perfil_promotor     BigInt @id @default(autoincrement())
  id_promotor            BigInt @unique
  vc_nombre              String
  vc_apellido_paterno    String
  vc_apellido_materno    String
  vc_telefono            String
  vc_correo              String
  i_registro             Int
  i_actualizacion        Int

  promotor promotores? @relation(fields: [id_promotor], references: [id_promotor])
}

model clientes {
  id_cliente             BigInt @id @default(autoincrement())

  usuarios usuarios[]
  marcas marcas[]
}

model marcas {
  id_marca               BigInt @id @default(autoincrement())
  vc_nombre              String
  i_registro             Int
  i_actualizacion        Int
  id_cliente BigInt

  cliente clientes? @relation(fields: [id_cliente], references: [id_cliente])
}

// TODO: preguntar datos necesarios
model establecimientos {
  id_establecimiento     BigInt @id @default(autoincrement())
  id_direccion           BigInt @unique
  id_localizacion        BigInt @unique
  vc_direccion           String
  vc_telefono            String
  i_registro             Int
  i_actualizacion        BigInt


  direccion direcciones? @relation(fields: [id_direccion], references: [id_direccion])
  localizacion localizaciones? @relation(fields: [id_localizacion], references: [id_localizacion])

  pedido pedido[]
}

model paises {
  id_pais                BigInt @id @default(autoincrement())
  vc_nombre              String
  i_registro             Int
  i_actualizacion        Int
  i_codigo_postal        Int

  estado estados[]
  direccion direcciones[]
}

model estados {
  id_estado              BigInt @id @default(autoincrement())
  id_pais                BigInt
  vc_nombre              String
  i_registro             Int
  i_actualizacion        Int
  i_codigo_postal        Int

  pais paises? @relation(fields: [id_pais], references: [id_pais])

  municipio municipios[]

  direccion direcciones[]
}

model municipios {
  id_municipio           BigInt @id @default(autoincrement())
  id_estado              BigInt
  vc_nombre              String
  i_registro             Int
  i_actualizacion        Int
  i_codigo_postal        Int

  estado estados? @relation(fields: [id_estado], references: [id_estado])

  colonia colonias[]

  direccion direcciones[]
}

model colonias {
  id_colonia             BigInt @id @default(autoincrement())
  id_municipio           BigInt
  vc_nombre              String
  i_registro             Int
  i_actualizacion        Int
  i_codigo_postal        Int

  municipio municipios? @relation(fields: [id_municipio], references: [id_municipio])

  direccion direcciones[]
}

model direcciones {
  id_direccion           BigInt @id @default(autoincrement())
  id_pais                BigInt
  id_estado              BigInt
  id_municipio           BigInt
  id_colonia             BigInt
  vc_calle               String
  vc_numero_exterior     String
  vc_numero_interior     String
  vc_codigo_postal       String
  i_registro             Int
  i_actualizacion        Int

  establecimiento establecimientos?

  pais paises? @relation(fields: [id_pais], references: [id_pais])
  estado estados? @relation(fields: [id_estado], references: [id_estado])
  municipio municipios? @relation(fields: [id_municipio], references: [id_municipio])
  colonia colonias? @relation(fields: [id_colonia], references: [id_colonia])
}

model localizaciones {
  id_localizacion                   BigInt @id @default(autoincrement())
  f_latitud               Decimal
  f_longitud              Decimal
  i_registro             Int
  i_actualizacion        Int

  establecimineto establecimientos?
}

model pedido {
  id_pedido              BigInt @id @default(autoincrement())
  id_establecimiento     BigInt 
  id_promotor            BigInt
  id_usuario             BigInt
  descripcion            String
  i_entrega              Int
  i_total                Int
  i_registro             Int
  i_actualizacion        Int

  establecimiento establecimientos? @relation(fields: [id_establecimiento], references: [id_establecimiento])
  promotor promotores? @relation(fields: [id_promotor], references: [id_promotor])
  usuario usuarios? @relation(fields: [id_usuario], references: [id_usuario])
}

// TODO: Logs de cada entidad

enum Roles {
  User
  Admin
  SuperAdmin
}

// TODO enum de estados




// model Store {
//   id             String   @id @default(cuid()) // Identificador único
//   // clientId       String?   // Identificador del cliente
//   name           String   @unique // Nombre de la tienda
//   economicNumber String?  // Número económico o serial
//   country        String   // País
//   state          String   // Estado
//   municipality   String   // Municipio
//   neighborhood   String   // Colonia
//   street         String   // Calle
//   streetNumber   String   // Número de la calle
//   postalCode     String   // Código postal
//   latitude       Float    // Latitud para Google Maps
//   longitude      Float    // Longitud para Google Maps
//   createdAt      DateTime @default(now()) // Fecha de creación
//   updatedAt      DateTime @updatedAt // Última actualización

//   Request Request[]

//   UserStoreSubscription UserStoreSubscription[]
// }

// model UserStoreSubscription {
//   id        String   @id @default(cuid())
//   userId    String   // ID del usuario suscrito
//   storeId   String   // ID de la tienda a la que se suscribe
//   createdAt DateTime @default(now()) // Fecha de suscripción

//   user      User     @relation(fields: [userId], references: [id]) // Relación con User
//   store     Store    @relation(fields: [storeId], references: [id]) // Relación con Store

//   @@unique([userId, storeId]) // Evita suscripciones duplicadas
// }

// model Request {
//   id          String   @id @default(cuid())
//   storeId     String   // Relación con la tienda
//   userId      String?  // Usuario que acepta la petición
//   status      Status   @default(PENDING) // Estado de la petición
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   store       Store    @relation(fields: [storeId], references: [id])
//   user        User?    @relation(fields: [userId], references: [id])

//   StatusUpdate StatusUpdate[]
// }

// model StatusUpdate {
//   id         String   @id @default(cuid())
//   requestId  String   // Relación con la petición
//   status     Status   // Nuevo estado
//   createdAt  DateTime @default(now())

//   request    Request  @relation(fields: [requestId], references: [id])
// }

// // Definimos un enum para los estados de la petición
// enum Status {
//   PENDING   // Petición generada
//   ACCEPTED  // Petición aceptada por el usuario
//   VALIDATED // Validación finalizada
//   COMPLETED // Petición completada
// }
