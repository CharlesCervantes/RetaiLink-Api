// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  nombre      String?
  apellido_paterno    String?
  apellido_materno    String?
  password  String
  username  String //numero telefonico
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Request Request[]
}

model Store {
  id             String   @id @default(cuid()) // Identificador único
  clientId       String   // Identificador del cliente
  name           String   @unique // Nombre de la tienda
  economicNumber String?  // Número económico o serial
  country        String   // País
  state          String   // Estado
  municipality   String   // Municipio
  neighborhood   String   // Colonia
  street         String   // Calle
  streetNumber   String   // Número de la calle
  postalCode     String   // Código postal
  latitude       Float    // Latitud para Google Maps
  longitude      Float    // Longitud para Google Maps
  createdAt      DateTime @default(now()) // Fecha de creación
  updatedAt      DateTime @updatedAt // Última actualización

  Request Request[]
}

model Request {
  id          String   @id @default(cuid())
  storeId     String   // Relación con la tienda
  userId      String?  // Usuario que acepta la petición
  status      Status   @default(PENDING) // Estado de la petición
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store       Store    @relation(fields: [storeId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  StatusUpdate StatusUpdate[]
}

model StatusUpdate {
  id         String   @id @default(cuid())
  requestId  String   // Relación con la petición
  status     Status   // Nuevo estado
  createdAt  DateTime @default(now())

  request    Request  @relation(fields: [requestId], references: [id])
}

// Definimos un enum para los estados de la petición
enum Status {
  PENDING   // Petición generada
  ACCEPTED  // Petición aceptada por el usuario
  VALIDATED // Validación finalizada
  COMPLETED // Petición completada
}
